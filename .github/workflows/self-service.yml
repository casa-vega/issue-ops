name: self-service

on:
  issues:
    types:
      - opened

jobs:
  issue_ops:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # we key off the label to determine which issue template/workflow to use/parse
      - name: get issue labels
        uses: actions/github-script@v6
        id: issue-labels
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            return issue.data.labels.map(label => label.name);
          result-encoding: string


      # parse the issue template into a json object
      # template-path is not required but highly recommended
      - name: parse issue input
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/${{ steps.issue-labels.outputs.result }}.yml


      # validate that required fields are present and that user has entitlements to perform the requested operation
      - name: validate required form entries and user auth
        id: validate
        run: |
          echo "FORM=$(python .github/scripts/verify.py form \
            --op=${{ steps.issue-labels.outputs.result }})" >> $GITHUB_OUTPUT &
          echo "AUTH=$(python .github/scripts/verify.py auth \
            --instance=${{ steps.issue-parser.outputs.issueparser_instance }} \
            --organization=${{ steps.issue-parser.outputs.issueparser_organization }} \
            --user=${{ github.actor }})" >> $GITHUB_OUTPUT &
          wait


      # if the validation steps above fail, this step will update the issue with a message indicating the missing or wrong fields
      - name: update issue with form validation failure message
        if: steps.validate.outputs.form != '' || steps.validate.outputs.auth != ''
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            const formErrors = ${{ toJSON(steps.validate.outputs.form) }};
            const authErrors = ${{ toJSON(steps.validate.outputs.auth) }};
            const formFailureMessage = 'Validation failed. This likely means you are missing a required form field.\n\n```json\n' + formErrors + '\n```\n';
            const authFailureMessage = 'Validation failed. You do not have the access required to perform this operation.\n\n```json\n' + authErrors + '\n```\n';
            const failureMessage = (steps.validate-form.outputs.form != '' ? formFailureMessage : '') + (steps.validate-auth.outputs.auth != '' ? authFailureMessage : '');
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: failureMessage,
            });
            core.setFailed('Verification failed. Errors: ' + failureMessage);


      # set the instance hostname for authentication
      - name: set instance hostname for authentication
        id: host
        run: |
          echo "HOSTNAME=$(python .github/scripts/verify.py hostname\
            --instance=${{ steps.issue-parser.outputs.issueparser_instance }} >> $GITHUB_OUTPUT


      # login to the instance using the gh cli
      - name: login with gh cli
        run: |
          echo ${{ secrets[format('{0}_TOKEN', steps.issue-parser.outputs.issueparser_instance)] }} > token.txt
          gh auth login \
          --hostname ${{ steps.host.outputs.hostname }} \
          --with-token < token.txt


      - name: create an organization webhook
        if: steps.issue-labels.outputs.result == 'org-webhook'
        run: |
          gh api orgs/${{ steps.issue-parser.outputs.issueparser_organization }}/hooks \
            --input - <<< '{
              "name": "web",
              "active": '[[ "${{ steps.issue-parser.outputs.issueparser_active }}" == "Enable" ]] && echo true || echo false',
              "events": '$(echo "${{ steps.issue-parser.outputs.issueparser_events }}" | jq -Rc 'split(",")')',
              "config": {
                "url": "${{ steps.issue-parser.outputs.issueparser_payload_url }}",
                "content_type": "${{ steps.issue-parser.outputs.issueparser_content_type }}"
              }
            }'


      - name: create a repository webhook
        if: steps.issue-labels.outputs.result == 'repo-webhook'
        run: |
          gh api repos/${{ steps.issue-parser.outputs.issueparser_organization }}/${{ steps.issue-parser.outputs.issueparser_repository }}/hooks \
            --input - <<< '{
              "name": "web",
              "active": '[[ "${{ steps.issue-parser.outputs.issueparser_active }}" == "Enable" ]] && echo true || echo false',
              "events": '$(echo "${{ steps.issue-parser.outputs.issueparser_events }}" | jq -Rc 'split(",")')',
              "config": {
                "url": "${{ steps.issue-parser.outputs.issueparser_payload_url }}",
                "content_type": "${{ steps.issue-parser.outputs.issueparser_content_type }}"
              }
            }'


      - name: create a repository
        if: steps.issue-labels.outputs.result == 'repo-create'
        run: |
          gh repo create \
            ${{ steps.issue-parser.outputs.issueparser_organization }}/${{ steps.issue-parser.outputs.issueparser_repository }} \
            --${{ steps.issue-parser.outputs.issueparser_visibility }} \
            `[[ "${{ steps.issue-parser.outputs.issueparser_readme }}" == "Enable" ]] && echo --add-readme` \
            --description "${{ steps.issue-parser.outputs.issueparser_description }}"


      - name: archive a repository
        if: steps.issue-labels.outputs.result == 'repo-archive'
        run: |
          gh api repos/${{ steps.issue-parser.outputs.issueparser_organization }}/${{ steps.issue-parser.outputs.issueparser_repository }} \
            --input - <<< '{
              "archived": true
            }'