name: self-service

on:
  issues:
    types:
      - opened

jobs:
  issue_ops:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # we key off the label to determine which issue template/workflow to use/parse
      - name: get issue labels
        uses: actions/github-script@v6
        id: issue-labels
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            return issue.data.labels.map(label => label.name);
          result-encoding: string


      # parse the issue template into a json object
      # template-path is not required but highly recommended
      - name: parse issue input
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/${{ steps.issue-labels.outputs.result }}.yml


      # validate that required fields are present and that user has entitlements to perform the requested operation
      - name: validate required form entries and user auth
        id: validate
        run: |
          echo "FORM=$(python .github/scripts/validation.py form \
            --op=${{ steps.issue-labels.outputs.result }})" >> $GITHUB_OUTPUT
          echo "AUTH=$(python .github/scripts/validation.py auth \
            --instance=${{ steps.issue-parser.outputs.issueparser_instance }} \
            --org=${{ steps.issue-parser.outputs.issueparser_organization }} \
            --user=${{ github.actor }})" >> $GITHUB_OUTPUT


      # if the validation steps above fail, this step will update the issue with a message indicating the missing or wrong fields
      - name: update issue with form validation failure message
        if: steps.validate.outputs.form != '' || steps.validate.outputs.auth != ''
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            const formErrors = ${{ toJSON(steps.validate.outputs.form) }};
            const authErrors = ${{ toJSON(steps.validate.outputs.auth) }};
            const formFailureMessage = 'FORM: This means you are missing a required form field.\n\n```json\n' + formErrors + '\n```\n';
            const authFailureMessage = 'AUTH: You do not have the access required to perform this operation.\n\n```json\n' + authErrors + '\n```\n';
            const failureMessage = (formErrors != '' ? formFailureMessage : '') + (authErrors != '' ? authFailureMessage : '');
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: failureMessage,
            });
            core.setFailed('Verification failed. Errors: ' + failureMessage);


      - name: setup payload
        id: payload
        run: |
          echo "JSON=$(python .github/scripts/validation.py payload \
            --instance=${{ steps.issue-parser.outputs.issueparser_instance }})" >> $GITHUB_OUTPUT
          echo ${{ secrets[format('{0}_TOKEN', steps.issue-parser.outputs.issueparser_instance)] }} > token.txt


      # dynamically call the appropriate action based on the issue template
      - name: call issue ops dynamically with composite action
        uses: ./.github/actions/issue-op
        id: issue-ops-composite
        with:
          uses: ./.github/actions/${{ steps.issue-labels.outputs.result }}
          with: ${{ steps.payload.outputs.json }}
